@model RepairTracker.DBModels.Repair

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using System.ComponentModel.DataAnnotations
@using RepairTracker.DBModels

@{
    ViewData["Title"] = "Work on repair";
}

<h1>Work on repair: @Model.RepairId</h1>

<div>
    <h3>Details</h3>
    <dl class="row">
        <dt class="col-md-2 right-aligned-text">
            @Html.DisplayNameFor(model => model.Game.GameName)
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.Game.GameName)
        </dd>
        <dt class="col-md-2 right-aligned-text">
            @Html.DisplayNameFor(model => model.Technician.TechnicianName)
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.Technician.TechnicianName)
        </dd>
        <dt class="col-md-2 right-aligned-text">
            @Html.DisplayNameFor(model => model.Owner.OwnerName)
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.Owner.OwnerName)
        </dd>
        <dt class="col-md-2 right-aligned-text">
            @Html.DisplayNameFor(model => model.ReceivedDate)
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.ReceivedDate)
        </dd>
        <dt class="col-md-2 right-aligned-text">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.StartDate)
        </dd>
        <dt class="col-md-2 right-aligned-text">
            @Html.DisplayNameFor(model => model.CustomerStates)
        </dt>
        <dd class="col-md-11">
            @Html.DisplayFor(model => model.CustomerStates)
        </dd>
    </dl>
    <hr />

    <form asp-action="Edit">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="RepairId" />

        <div>
            <h3>Parts used</h3>
            <table class="table items-table" id="PartsUsed">
                <thead>
                    <tr>
                        <th>Delete</th>
                        <th>
                            Part
                        </th>
                        <th>
                            Sale $
                        </th>
                        <th>
                            Quantity
                        </th>
                        <th>
                            Line Total$
                        </th>
                    </tr>
                </thead>
                <tbody id="partsUsedContainer">
                    @await Html.PartialAsync("_PartsUsedTablePartialView", Model.RepairParts)
                </tbody>
            </table>
            <!-- Item Lookup Input in the middle -->
            <input type="text" id="partLookupInput" class="form-control" placeholder="Lookup Item" autocomplete="off" style="height: 50;">

            <!-- Lookup Results ListBox -->
            <select id="partLookupResults" class="form-control" size="5" style="overflow-y: auto;">
                <!-- Lookup results will be populated here -->
            </select>
        </div>

        <hr />

        <h3>Work performed</h3>
        <table class="table items-table" id="Notes">
            <thead>
                <tr>
                    <th>Delete</th>
                    <th>Work Date</th>
                    <th>Work Description</th>
                </tr>
            </thead>
            <tbody>
                    @await Html.PartialAsync("_NotesTablePartialView", Model.RepairNotes)
            </tbody>
        </table>
        <input type="button" value="Add Note" class="btn btn-primary" onclick="addNote();" />

        <hr />

        <div class="form-group">
        <input type="submit" value="Save work and close" class="btn btn-primary col-mid-1" />
        <div class="col-mid-5" />
        <input type="submit" value="Finish Repair" class="btn btn-primary col-mid-1" />
        </div>
       
    </form>
</div>

<div>
    <a asp-action="RepairsIndex">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {

            // Event delegation for dynamically added line items
            $("#PartsUsed tbody").on("input", ".qty, .sale", function () {
                console.log("Change handler");
                var index = $(this).closest('tr').index();
                updateLineTotal(index);
            });

            $("#partLookupResults").click(function () {
                console.log("Part Lookup results click event fired");
                event.preventDefault(); // we want to refresh in place as the model hasn't changed.
                var selectedPartId = $(this).val(); // Assuming this is the item ID
                if (selectedPartId) {
                    addPartLineItem(selectedPartId);
                }
            });

            // Use debounce to limit requests
            $("#partLookupInput").on('input', debounce(lookupPart, 500)); // Adjust debounce time as needed

        });

        // Function to recalculate the line total
        function updateLineTotal(index) {
            console.log("update line total: " + index);
            const qty = parseFloat(document.getElementById('qty_' + index).value) || 0;
            const costPrice = parseFloat(document.getElementById('sale_' + index).value) || 0;
            const lineTotal = qty * costPrice;
            console.log("qty " + qty + " costPrice " + costPrice + " lineTotal " + lineTotal);
            document.getElementById('lineTotal_' + index).innerText = lineTotal.toFixed(2);
//            updateTotals();
        }

        function UpdateTotals() { 
        
        }


        function addPartLineItem(selectedPartId) {
            console.log("Add line item call:" + selectedPartId);
            $.ajax({
                url: '@Url.Action("AddPartLineItem", "Repairs")',
                type: 'POST',
                data: {
                    repairId: @Model.RepairId,
                    partId: selectedPartId,
                    quantity: 1
                },
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    console.log("Add line item call success:" + selectedPartId);
                    // Assuming the response is the HTML of the new line item table
                    var li = $("#PartsUsed tbody");
                    li.html(response);

                    //updateTotals(); // Update totals, implement this function as needed
                },
                error: function (xhr, status, error) {
                    // Handle error
                    console.error("Error adding line item: " + error);
                }
            });
        }

        // Function to handle item lookup
        function lookupPart() {
            console.log("Lookup item call");
            var query = $("#partLookupInput").val();
            if (query.length >= 2) { // Only search if query length is 2 or more characters
                $.ajax({
                    url: '@Url.Action("LookupPart", "Repairs")',
                    type: 'GET',
                    data: { query: query },
                    success: function (result) {
                        // Clear existing options
                        $("#lookupResults").empty();
                        if (result.success && result.items.length > 0) {
                            // Populate the listbox with the lookup results
                            result.items.forEach(function (item) {
                                $("#partLookupResults").append($('<option>',
                                    {
                                        value: item.partId,
                                        text: item.partName + ' - ' + item.cost + ' - ' + item.sale + ' - ' + item.supplier,
                                    }
                                ));
                            });
                        } else {
                            // Handle no results or failure
                            $("#partLookupResults").append($('<option>', {
                                text: "No items found"
                            }));
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        console.error("Error looking up item: " + error);
                    }
                });
            }
        }

        // Debounce function to limit how often a function is called
        function debounce(func, wait, immediate) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        }

        function deletePartLineItem(element, lineItemId) {
            console.log("Delete part line item call:" + lineItemId);
            $.ajax({
                url: '@Url.Action("DeletePartLineItem", "Repairs")',
                type: 'POST',
                data: {
                    repairId: @Model.RepairId,
                    repairPartId: lineItemId
                },
                success: function (response) {
                    console.log("delete line item call success:" + lineItemId);
                    if (response.success) {
                        // Remove the row from the table
                        $(element).closest('tr').remove();
                        //updateTotals(); // Recalculate totals after deletion
                    } else {
                        console.log("delete line item call failed:" + lineItemId);
                        alert("Failed to delete line item: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.log("Error calling deletelineitem:" + lineItemId);
                    alert("Error deleting line item: " + error);
                }
            });
        }

        function addNote() {
            console.log("Add note call");
            $.ajax({
                url: '@Url.Action("AddNoteLine", "Repairs")',
                type: 'POST',
                data: {
                    repairId: @Model.RepairId
                },
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    console.log("Add note call success");
                    // Assuming the response is the HTML of the new line item table
                    var li = $("#Notes tbody");
                    li.html(response);
                },
                error: function (xhr, status, error) {
                    // Handle error
                    console.error("Error adding note: " + error);
                }
            });
        }

    </script>
}

