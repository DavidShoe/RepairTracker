// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepairTracker.DBModels;

#nullable disable

namespace RepairTracker.Migrations
{
    [DbContext(typeof(GameRepairContext))]
    [Migration("20240827043913_UpdateDatabaseClassesFromDB")]
    partial class UpdateDatabaseClassesFromDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepairTracker.DBModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("GameName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OwnerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"));

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PartId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Sale")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Parts_CategoryID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepairId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairId"));

                    b.Property<DateOnly?>("FinishedDate")
                        .HasColumnType("date");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("GameId");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerId");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianId");

                    b.HasKey("RepairId");

                    b.HasIndex("OwnerId");

                    b.HasIndex(new[] { "GameId" }, "IX_Repairs_GameID");

                    b.HasIndex(new[] { "TechnicianId" }, "IX_Repairs_TechnicianID");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("RepairTracker.DBModels.RepairNote", b =>
                {
                    b.Property<int>("RepairNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepairNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairNoteId"));

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepairId")
                        .HasColumnType("int")
                        .HasColumnName("RepairId");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianId");

                    b.HasKey("RepairNoteId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex(new[] { "RepairId" }, "IX_RepairNotes_RepairID");

                    b.ToTable("RepairNotes");
                });

            modelBuilder.Entity("RepairTracker.DBModels.RepairPart", b =>
                {
                    b.Property<int>("RepairPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepairPartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairPartId"));

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("PartId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RepairId")
                        .HasColumnType("int")
                        .HasColumnName("RepairId");

                    b.HasKey("RepairPartId");

                    b.HasIndex(new[] { "PartId" }, "IX_RepairParts_PartID");

                    b.HasIndex(new[] { "RepairId" }, "IX_RepairParts_RepairID");

                    b.ToTable("RepairParts");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TechnicianName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("RepairTracker.DBModels.WallTime", b =>
                {
                    b.Property<int>("WallTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WallTimeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WallTimeId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepairId")
                        .HasColumnType("int")
                        .HasColumnName("RepairId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianId");

                    b.HasKey("WallTimeId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex(new[] { "RepairId" }, "IX_WallTimes_RepairID");

                    b.ToTable("WallTimes");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Part", b =>
                {
                    b.HasOne("RepairTracker.DBModels.Category", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Repair", b =>
                {
                    b.HasOne("RepairTracker.DBModels.Game", "Game")
                        .WithMany("Repairs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairTracker.DBModels.Owner", "Owner")
                        .WithMany("Repairs")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Repairs_Owners");

                    b.HasOne("RepairTracker.DBModels.Technician", "Technician")
                        .WithMany("Repairs")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Owner");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("RepairTracker.DBModels.RepairNote", b =>
                {
                    b.HasOne("RepairTracker.DBModels.Repair", "Repair")
                        .WithMany("RepairNotes")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairTracker.DBModels.Technician", "Technician")
                        .WithMany("RepairNotes")
                        .HasForeignKey("TechnicianId")
                        .IsRequired()
                        .HasConstraintName("FK_RepairNotes_Technicians");

                    b.Navigation("Repair");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("RepairTracker.DBModels.RepairPart", b =>
                {
                    b.HasOne("RepairTracker.DBModels.Part", "Part")
                        .WithMany("RepairParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairTracker.DBModels.Repair", "Repair")
                        .WithMany("RepairParts")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("RepairTracker.DBModels.WallTime", b =>
                {
                    b.HasOne("RepairTracker.DBModels.Repair", "Repair")
                        .WithMany("WallTimes")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairTracker.DBModels.Technician", "Technician")
                        .WithMany("WallTimes")
                        .HasForeignKey("TechnicianId")
                        .IsRequired()
                        .HasConstraintName("FK_WallTimes_Technicians");

                    b.Navigation("Repair");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Category", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Game", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Owner", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Part", b =>
                {
                    b.Navigation("RepairParts");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Repair", b =>
                {
                    b.Navigation("RepairNotes");

                    b.Navigation("RepairParts");

                    b.Navigation("WallTimes");
                });

            modelBuilder.Entity("RepairTracker.DBModels.Technician", b =>
                {
                    b.Navigation("RepairNotes");

                    b.Navigation("Repairs");

                    b.Navigation("WallTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
